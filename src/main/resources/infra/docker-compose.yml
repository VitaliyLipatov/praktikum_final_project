version: "3.5"
services:
  zookeeper-source:
    image: confluentinc/cp-zookeeper:7.4.4
    restart: always
    container_name: zookeeper-source
    hostname: zookeeper-source
    ports:
      - "2181:2181"
    volumes:
      - data-zookeeper-log-1:/var/lib/zookeeper/log
      - data-zookeeper-data-1:/var/lib/zookeeper/data
      - ./etc/zookeeper/secrets/zookeeper.sasl.jaas.conf:/etc/zookeeper/secrets/zookeeper.sasl.jaas.conf
    networks:
      - proxynet
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_REQUIRE_CLIENT_AUTH_SCHEME: "sasl"
      ZOOKEEPER_AUTH_PROVIDER_1: "org.apache.zookeeper.server.auth.SASLAuthenticationProvider"
      ZOOKEEPER_SASL_ENABLED: "true"
      KAFKA_OPTS:
        -Djava.security.auth.login.config=/etc/zookeeper/secrets/zookeeper.sasl.jaas.conf
        -Dquorum.cnxn.threads.size=20
        -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
        -Dzookeeper.allowSaslFailedClients=false
        -DjaasLoginRenew=3600000

  kafka-0:
    image: confluentinc/cp-kafka:7.4.4
    restart: always
    container_name: kafka-0
    hostname: kafka-0
    depends_on:
      - zookeeper-source
    ports:
      - "9093:9093"
      - "9082:9082"
      - "9991:9991"
    networks:
      - proxynet
    volumes:
      - data-kafka-0:/var/lib/kafka/data
      - ./kafka-0-creds/etc/kafka/secrets:/etc/kafka/secrets
      - ./etc/kafka/jaas:/etc/kafka/jaas
      - ./kafka-0-creds/properties/client-ssl.properties:/properties/client-ssl.properties
      - ./config/server.properties:/etc/kafka/server.properties
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-source:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://:9082,SASL_SSL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-0:9082,SASL_SSL://127.0.0.1:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SASL_SSL:SASL_SSL
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SUPER_USERS: "User:admin"
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/jaas/kafka_server_jaas.conf"
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-0.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka-0_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: kafka-0_keystore_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.kafka-0.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka-0_truststore_creds
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_JMX_PORT: 9991
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-0:9082
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: ${KAFKA_BROKER_HEAP_OPTS}

  kafka-1:
    image: confluentinc/cp-kafka:7.4.4
    restart: always
    container_name: kafka-1
    hostname: kafka-1
    depends_on:
      - zookeeper-source
    ports:
      - "9095:9095"
      - "9083:9083"
      - "9992:9992"
    networks:
      - proxynet
    volumes:
      - data-kafka-1:/var/lib/kafka/data
      - ./kafka-1-creds/etc/kafka/secrets:/etc/kafka/secrets
      - ./etc/kafka/jaas:/etc/kafka/jaas
      - ./kafka-1-creds/properties/client-ssl.properties:/properties/client-ssl.properties
      - ./config/server.properties:/etc/kafka/server.properties
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-source:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://:9083,SASL_SSL://0.0.0.0:9095
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9083,SASL_SSL://127.0.0.1:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SASL_SSL:SASL_SSL
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SUPER_USERS: "User:admin"
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/jaas/kafka_server_jaas.conf"
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-1.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka-1_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: kafka-1_keystore_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.kafka-1.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka-1_truststore_creds
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_JMX_PORT: 9992
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-1:9083
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: ${KAFKA_BROKER_HEAP_OPTS}

  kafka-2:
    image: confluentinc/cp-kafka:7.4.4
    restart: always
    container_name: kafka-2
    hostname: kafka-2
    depends_on:
      - zookeeper-source
    ports:
      - "9097:9097"
      - "9084:9084"
      - "9993:9993"
    networks:
      - proxynet
    volumes:
      - data-kafka-2:/var/lib/kafka/data
      - ./kafka-2-creds/etc/kafka/secrets:/etc/kafka/secrets
      - ./etc/kafka/jaas:/etc/kafka/jaas
      - ./kafka-2-creds/properties/client-ssl.properties:/properties/client-ssl.properties
      - ./config/server.properties:/etc/kafka/server.properties
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-source:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://:9084,SASL_SSL://0.0.0.0:9097
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9084,SASL_SSL://127.0.0.1:9097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SASL_SSL:SASL_SSL
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SUPER_USERS: "User:admin"
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/jaas/kafka_server_jaas.conf"
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-2.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka-2_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: kafka-2_keystore_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.kafka-2.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka-2_truststore_creds
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_JMX_PORT: 9993
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-2:9084
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: ${KAFKA_BROKER_HEAP_OPTS}

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    ports:
      - '127.0.0.1:8081:8081'
    depends_on:
      - zookeeper-source
      - kafka-0
      - kafka-1
      - kafka-2
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-0:9082,PLAINTEXT://kafka-1:9083,PLAINTEXT://kafka-2:9084
    networks:
      - proxynet

  zookeeper-destination:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper-destination
    container_name: zookeeper-destination
    ports:
      - "2182:2182"
    networks:
      - proxynet
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182

  kafka-destination-0:
    image: confluentinc/cp-kafka
    hostname: kafka-destination-0
    container_name: kafka-destination-0
    networks:
      - proxynet
    depends_on:
      - zookeeper-destination
    ports:
      - "9193:9193"
      - "29193:29193"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-destination:2182'
      KAFKA_LISTENERS: BOB://kafka-destination-0:9193,EXT://kafka-destination-0:29193
      KAFKA_ADVERTISED_LISTENERS: BOB://kafka-destination-0:9193,EXT://localhost:29193
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BOB:PLAINTEXT,EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: BOB
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-destination-1:
    image: confluentinc/cp-kafka
    hostname: kafka-destination-1
    container_name: kafka-destination-1
    networks:
      - proxynet
    depends_on:
      - zookeeper-destination
    ports:
      - "9195:9195"
      - "29195:29195"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-destination:2182'
      KAFKA_LISTENERS: BOB://kafka-destination-1:9195,EXT://kafka-destination-1:29195
      KAFKA_ADVERTISED_LISTENERS: BOB://kafka-destination-1:9195,EXT://localhost:29195
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BOB:PLAINTEXT,EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: BOB
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-destination-2:
    image: confluentinc/cp-kafka
    hostname: kafka-destination-2
    container_name: kafka-destination-2
    networks:
      - proxynet
    depends_on:
      - zookeeper-destination
    ports:
      - "9197:9197"
      - "29197:29197"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-destination:2182'
      KAFKA_LISTENERS: BOB://kafka-destination-2:9197,EXT://kafka-destination-2:29197
      KAFKA_ADVERTISED_LISTENERS: BOB://kafka-destination-2:9197,EXT://localhost:29197
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BOB:PLAINTEXT,EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: BOB
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  mirror-maker:
    image: confluentinc/cp-kafka
    networks:
      - proxynet
    volumes:
      - ./consumer.cfg:/etc/consumer.cfg
      - ./producer.cfg:/etc/producer.cfg
    command: bash -c "kafka-mirror-maker --consumer.config /etc/consumer.cfg --producer.config /etc/producer.cfg --whitelist products,deprecated-product,filtered-products,clients-request --num.streams 1"
    depends_on:
      - kafka-0
      - kafka-destination-0
      - zookeeper-destination

  kafka-ui:
    image: provectuslabs/kafka-ui
    depends_on:
      - mirror-maker
    networks:
      - proxynet
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-0:9082
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_1_NAME: local2
      KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS: kafka-destination-0:9193
      KAFKA_CLUSTERS_1_ZOOKEEPER: zookeeper:2182

  kafka-connect:
    build:
      context: ./kafka-connect
    ports:
      - "8083:8083"
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2
      - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-0:9082
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: 'kafka-connect'

      CONNECT_REST_ADVERTISED_HOST_NAME: 'localhost'

      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      CONNECT_CONFIG_STORAGE_TOPIC: 'connect-config-storage'
      CONNECT_OFFSET_STORAGE_TOPIC: 'connect-offset-storage'
      CONNECT_STATUS_STORAGE_TOPIC: 'connect-status-storage'

      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"

      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081/'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081/'
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"

      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/jars
    volumes:
      - ./confluent-hub-components/:/etc/kafka-connect/jars
    networks:
      - proxynet

  prometheus:
    image: "prom/prometheus:${PROMETHEUS_VERSION}"
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml"
    container_name: prometheus
    networks:
      - proxynet

  grafana:
    image: "grafana/grafana:${GRAFANA_VERSION}"
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_PATHS_DATA: /var/lib/grafana
      GF_SECURITY_ADMIN_PASSWORD: kafka
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    container_name: grafana
    depends_on:
      - prometheus
    networks:
      - proxynet

  jmx-kafka-0:
    image: "sscaling/jmx-prometheus-exporter"
    restart: unless-stopped
    ports:
      - "5556:5556"
    environment:
      CONFIG_YML: "/etc/jmx_exporter/config.yml"
      JVM_OPTS: ${PROMETHEUS_JMX_AGENT_JVM_OPTS}
    volumes:
      - ./etc/jmx_exporter/config_kafka101.yml:/etc/jmx_exporter/config.yml
    container_name: jmx-kafka-0
    depends_on:
      - kafka-0
    networks:
      - proxynet

  jmx-kafka-1:
    image: "sscaling/jmx-prometheus-exporter"
    restart: unless-stopped
    ports:
      - "5557:5556"
    environment:
      CONFIG_YML: "/etc/jmx_exporter/config.yml"
      JVM_OPTS: ${PROMETHEUS_JMX_AGENT_JVM_OPTS}
    volumes:
      - ./etc/jmx_exporter/config_kafka102.yml:/etc/jmx_exporter/config.yml
    container_name: jmx-kafka-1
    depends_on:
      - kafka-1
    networks:
      - proxynet

  jmx-kafka-2:
    image: "sscaling/jmx-prometheus-exporter"
    restart: unless-stopped
    ports:
      - "5558:5556"
    environment:
      CONFIG_YML: "/etc/jmx_exporter/config.yml"
      JVM_OPTS: ${PROMETHEUS_JMX_AGENT_JVM_OPTS}
    volumes:
      - ./etc/jmx_exporter/config_kafka103.yml:/etc/jmx_exporter/config.yml
    container_name: jmx-kafka-2
    depends_on:
      - kafka-2
    networks:
      - proxynet

  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    depends_on:
      - kafka-destination-0
      - kafka-destination-1
      - kafka-destination-2
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka-destination-0:9193
    ports:
      - "8088:8088"
    networks:
      - proxynet

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh -c 'exec ksql http://ksqldb-server:8088'
    stdin_open: true
    tty: true
    networks:
      - proxynet

#  hadoop-namenode:
#    image: apache/hadoop:3.4.1
#    container_name: hadoop-namenode
#    hostname: hadoop-namenode
#    user: "root"
#    restart: always
#    platform: linux/amd64
#    deploy:
#      resources:
#        limits:
#          cpus: "1.0"   # Ограничение использования CPU
#          memory: "2g"  # Ограничение использования RAM
#    shm_size: 10G
#    ports:
#      - "9870:9870"  # HTTP-порт для Web UI HDFS NameNode
#      - "9000:9000"  # RPC порт для запросов к NameNode
#    volumes:
#      - ./config/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
#      - ./config/hdfs-site-namenode.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
#      - ./namenode_entrypoint.sh:/namenode_entrypoint.sh
#    entrypoint: [ "/bin/bash", "/namenode_entrypoint.sh" ]
#    command: [ "hdfs", "namenode" ]

#  hadoop-datanode-1:
#    image: apache/hadoop:3.4.1
#    container_name: hadoop-datanode-1
#    hostname: hadoop-datanode-1
#    user: "root"
#    restart: always
#    platform: linux/amd64
#    deploy:
#      resources:
#        limits:
#          cpus: "1.0"   # Ограничение использования CPU
#          memory: "2g"  # Ограничение использования RAM
#    shm_size: 10G
#    depends_on:
#      - hadoop-namenode
#    ports:
#      - "9864:9864"  # HTTP-порт для Web UI DataNode №1
#      - "9970:9970"  # RPC порт для запросов от NameNode
#    volumes:
#      - ./config/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
#      - ./config/hdfs-site-datanode-1.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
#      - ./datanode_entrypoint.sh:/datanode_entrypoint.sh
#    entrypoint: [ "/bin/bash", "/datanode_entrypoint.sh" ]
#    command: [ "hdfs", "datanode" ]

  # Apache Spark master node
#  spark-master:
#    image: bitnami/spark:3.5.4
#    container_name: spark-master
#    ports:
#      - "8777:8777"  # HTTP-порт для Web UI Spark
#      - "7077:7077"  # Порт для Spark master-сервис
#    environment:
#      SPARK_MODE: master
#      SPARK_MASTER_HOST: spark-master

  # Apache Spark worker node №1
#  spark-worker-1:
#    image: bitnami/spark:3.5.4
#    container_name: spark-worker-1
#    depends_on:
#      - spark-master
#    environment:
#      SPARK_MODE: worker
#      SPARK_MASTER_URL: spark://spark-master:7077

  # Apache Spark worker node №2
#  spark-worker-2:
#    image: bitnami/spark:3.5.4
#    container_name: spark-worker-2
#    depends_on:
#      - spark-master
#    environment:
#      SPARK_MODE: worker
#      SPARK_MASTER_URL: spark://spark-master:7077

networks:
  proxynet:
    name: custom_network

volumes:
  data-zookeeper-log-1:
  data-zookeeper-data-1:
  data-kafka-0:
  data-kafka-1:
  data-kafka-2: